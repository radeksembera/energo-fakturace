from flask import Blueprint, render_template, request, redirect, url_for, session, flash
from models import db, Stredisko, ImportOdectu, ObdobiFakturace, Odecet, ZalohovaFaktura
from session_helpers import handle_obdobi_selection, get_session_obdobi
import pandas as pd

odecty_bp = Blueprint("odecty", __name__, template_folder="templates/fakturace")

# osetreni 00 v importu odectu 
def safe_oznaceni_string(value):
    """Bezpeƒçnƒõ p≈ôevede hodnotu na string s zachov√°n√≠m vedouc√≠ch nul pro oznaƒçen√≠ OM"""
    if pd.isna(value) or value == "":
        return ""
    
    # Pokud je to ƒç√≠slo, p≈ôeveƒè na string s 7 znaky a vedouc√≠mi nulami
    if isinstance(value, (int, float)):
        return f"{int(value):07d}"
    
    # Pokud je to u≈æ string, zachovej jak je (pro p≈ô√≠pady jako "0014002")
    return str(value).strip()

@odecty_bp.route("/<int:stredisko_id>/odecty")
def odecty(stredisko_id):
    if not session.get("user_id"):
        return redirect("/login")

    # Naƒçti st≈ôedisko a ovƒõ≈ô vlastnictv√≠
    stredisko = Stredisko.query.get_or_404(stredisko_id)
    if stredisko.user_id != session["user_id"]:
        return "Nepovolen√Ω p≈ô√≠stup", 403

    # ‚úÖ NOV√â - jednotn√° spr√°va obdob√≠
    vsechna_obdobi = ObdobiFakturace.query.filter_by(stredisko_id=stredisko_id)\
        .order_by(ObdobiFakturace.rok, ObdobiFakturace.mesic).all()

    # Zpracuj v√Ωbƒõr obdob√≠ ze session
    vybrane_obdobi = handle_obdobi_selection(stredisko_id, request.args)

    # Naƒçti importy podle vybran√©ho obdob√≠
    importy = []
    if vybrane_obdobi:
        importy = ImportOdectu.query.filter_by(
            stredisko_id=stredisko_id,
            obdobi_id=vybrane_obdobi.id
        ).all()

    return render_template(
        "fakturace/import_odectu.html",
        stredisko=stredisko,
        vsechna_obdobi=vsechna_obdobi,
        vybrane_obdobi=vybrane_obdobi,
        importy=importy
    )


@odecty_bp.route("/<int:stredisko_id>/import_odectu/nahrat", methods=["POST"])
def nahrat_import_odectu(stredisko_id):
    if not session.get("user_id"):
        return redirect("/login")

    obdobi_id = request.args.get("obdobi_id", type=int)
    if not obdobi_id:
        flash("Chyb√≠ parametr obdob√≠.")
        return redirect(url_for("odecty.odecty", stredisko_id=stredisko_id))

    file = request.files.get("xlsx_file")
    if not file or file.filename == "":
        flash("Nebyl vybr√°n ≈æ√°dn√Ω soubor.")
        return redirect(url_for("odecty.odecty", stredisko_id=stredisko_id, obdobi_id=obdobi_id))

    try:
        print("Zaƒç√≠n√° import...")
        # Naƒçteme Excel soubor (.xls nebo .xlsx)
        df = pd.read_excel(file)
        print("üß† Naƒçten√© sloupce:", df.columns.tolist())

        vybrane_obdobi = ObdobiFakturace.query.get(obdobi_id)
        if not vybrane_obdobi:
            flash("Zvolen√© obdob√≠ neexistuje.")
            return redirect(url_for("odecty.odecty", stredisko_id=stredisko_id))

        # Nejprve sma≈æeme star√© importy pro toto obdob√≠
        ImportOdectu.query.filter_by(
            stredisko_id=stredisko_id,
            obdobi_id=obdobi_id
        ).delete()

        uspesne_importy = 0
        chyby = []

        for index, row in df.iterrows():
            try:
                # Bezpeƒçn√© naƒçten√≠ voliteln√Ωch sloupc≈Ø
                try:
                    # Sloupec O (index 14) - slevovy_bonus
                    if len(row) > 14 and pd.notnull(row.iloc[14]) and row.iloc[14] != 0:
                        slevovy_bonus = float(row.iloc[14])
                    else:
                        slevovy_bonus = None
                    
                    # Sloupec P (index 15) - dofakturace  
                    if len(row) > 15 and pd.notnull(row.iloc[15]) and row.iloc[15] != 0:
                        dofakturace = float(row.iloc[15])
                    else:
                        dofakturace = None
                    
                    # Sloupec R (index 17) - priznak
                    if len(row) > 17 and pd.notnull(row.iloc[17]) and str(row.iloc[17]).strip() != "":
                        priznak = str(row.iloc[17]).strip()
                    else:
                        priznak = None

                    # Debug v√Ωpis pro kontrolu
                    print(f"üîç ≈ò√°dek {index + 2}: slevovy_bonus={slevovy_bonus}, dofakturace={dofakturace}, priznak='{priznak}'")

                except (IndexError, ValueError) as e:
                    # Fallback hodnoty pokud se nƒõco pokaz√≠
                    slevovy_bonus = None
                    dofakturace = None
                    priznak = None
                    print(f"‚ö†Ô∏è Chyba p≈ôi ƒçten√≠ voliteln√Ωch sloupc≈Ø ≈ô√°dku {index + 2}: {e}")

                # Zpracov√°n√≠ dat podle nov√© struktury
                novy = ImportOdectu(
                    stredisko_id=int(stredisko_id),
                    import_rok=int(row["Rok"]),
                    import_mesic=int(row["Mƒõs√≠c"]),
                    oznaceni_om=safe_oznaceni_string(row["oznaceni"]),  # ‚úÖ OPRAVENO - zachov√° vedouc√≠ nuly
                    nazev=str(row["N√°zev"]),
                    textova_informace=str(row["Textov√° informace - V≈°e"]),
                    
                    # Zpracov√°n√≠ dat - pokud jsou v Excel form√°tu, p≈ôevedeme na datetime
                    zacatek_periody_mereni=pd.to_datetime(row["Zaƒç√°tek periody mƒõ≈ôen√≠"], errors="coerce") if pd.notnull(row["Zaƒç√°tek periody mƒõ≈ôen√≠"]) else None,
                    konec_periody_mereni=pd.to_datetime(row["Konec periody mƒõ≈ôen√≠"], errors="coerce") if pd.notnull(row["Konec periody mƒõ≈ôen√≠"]) else None,
                    datum_a_cas_odectu=pd.to_datetime(row["Skuteƒçnƒõ odeƒçteno"], errors="coerce") if pd.notnull(row["Skuteƒçnƒõ odeƒçteno"]) else None,
                    
                    zdroj_hodnoty=str(row.get("Zdroj hodnoty") or row.get("Zdroj hodnot", "")) if pd.notnull(row.get("Zdroj hodnoty") or row.get("Zdroj hodnot")) else "",
                    popis_dimenze=str(row["Popis dimenze"]) if pd.notnull(row["Popis dimenze"]) else "",
                    pocatecni_hodnota=float(row["PZ hodnota"]) if pd.notnull(row["PZ hodnota"]) else None,
                    hodnota_odectu=float(row["Hodnota odeƒçtu"]) if pd.notnull(row["Hodnota odeƒçtu"]) else None,
                    spotreba=float(row["Spot≈ôeba s koeficientem dimenze"]) if pd.notnull(row["Spot≈ôeba s koeficientem dimenze"]) else None,
                    merna_jednotka=str(row["Mƒõrn√° jednotka"]) if pd.notnull(row["Mƒõrn√° jednotka"]) else "",
                    
                    # Spr√°vnƒõ naƒçten√© voliteln√© hodnoty
                    slevovy_bonus=slevovy_bonus,
                    dofakturace=dofakturace,
                    priznak=priznak,
                    
                    zaloha_importu_kc=float(row.get("z√°loha ƒç.", 0)) if pd.notnull(row.get("z√°loha ƒç.")) else None,
                    
                    obdobi_id=int(obdobi_id)
                )

                db.session.add(novy)
                uspesne_importy += 1

            except Exception as e:
                chyba_msg = f"≈ò√°dek {index + 2}: {str(e)}"
                chyby.append(chyba_msg)
                print(f"‚ùå Chyba p≈ôi zpracov√°n√≠ ≈ô√°dku {index + 2}: {e}")
                print("Problematick√Ω ≈ô√°dek:", row.to_dict())

        db.session.commit()
        
        # Zpr√°vy o v√Ωsledku
        if uspesne_importy > 0:
            flash(f"‚úÖ √öspƒõ≈°nƒõ importov√°no {uspesne_importy} z√°znam≈Ø.")
        
        if chyby:
            for chyba in chyby[:5]:  # Zobraz max 5 chyb
                flash(f"‚ö†Ô∏è {chyba}")
            if len(chyby) > 5:
                flash(f"‚ö†Ô∏è ... a dal≈°√≠ch {len(chyby)-5} chyb")

    except Exception as e:
        print("‚ùå V√Ωjimka p≈ôi zpracov√°n√≠:", e)
        flash(f"‚ùå Chyba p≈ôi importu: {e}")

    return redirect(url_for("odecty.odecty", stredisko_id=stredisko_id, obdobi_id=obdobi_id))


@odecty_bp.route("/<int:stredisko_id>/import_odectu/smazat", methods=["POST"])
def smazat_import_odectu(stredisko_id):
    if not session.get("user_id"):
        return redirect("/login")

    obdobi_id = request.args.get("obdobi_id", type=int)
    if not obdobi_id:
        flash("Chyb√≠ parametr obdob√≠.")
        return redirect(url_for('odecty.odecty', stredisko_id=stredisko_id))

    try:
        # Sma≈æeme podle stredisko_id a obdobi_id (ne podle import_rok/import_mesic)
        smazano = ImportOdectu.query.filter_by(
            stredisko_id=stredisko_id,
            obdobi_id=obdobi_id
        ).delete()
        
        db.session.commit()
        
        if smazano > 0:
            flash(f"‚úÖ Import odeƒçt≈Ø byl smaz√°n ({smazano} z√°znam≈Ø).")
        else:
            flash("‚ö†Ô∏è ≈Ω√°dn√© z√°znamy k smaz√°n√≠ nebyly nalezeny.")
            
    except Exception as e:
        flash(f"‚ùå Chyba p≈ôi maz√°n√≠: {e}")

    return redirect(url_for('odecty.odecty', stredisko_id=stredisko_id, obdobi_id=obdobi_id))


# Potvrzeni dat a predani do odectu

@odecty_bp.route("/<int:stredisko_id>/import_potvrdit", methods=["GET"])
def import_potvrdit(stredisko_id):
    if not session.get("user_id"):
        return redirect("/login")

    obdobi_id = request.args.get("obdobi_id", type=int)
    if not obdobi_id:
        flash("Chyb√≠ parametr obdob√≠.")
        return redirect(url_for("odecty.odecty", stredisko_id=stredisko_id))

    importy = ImportOdectu.query.filter_by(stredisko_id=stredisko_id, obdobi_id=obdobi_id).all()
    if not importy:
        flash("≈Ω√°dn√© importovan√© odeƒçty k potvrzen√≠.")
        return redirect(url_for("odecty.odecty", stredisko_id=stredisko_id, obdobi_id=obdobi_id))

    try:
        # Nejprve sma≈æeme star√© odeƒçty pro toto obdob√≠
        Odecet.query.filter_by(
            stredisko_id=stredisko_id,
            obdobi_id=obdobi_id
        ).delete()

        # P≈òID√ÅNO: V√Ωpoƒçet celkov√© z√°lohy
        celkova_zaloha = sum(imp.zaloha_importu_kc or 0 for imp in importy)
        
        # P≈òID√ÅNO: Ulo≈æen√≠ z√°lohy do zalohova_faktura
        if celkova_zaloha > 0:
            # Najdi nebo vytvo≈ô z√°znam z√°lohov√© faktury
            zaloha_faktura = ZalohovaFaktura.query.filter_by(
                stredisko_id=stredisko_id,
                obdobi_id=obdobi_id
            ).first()
            
            if not zaloha_faktura:
                zaloha_faktura = ZalohovaFaktura(
                    stredisko_id=stredisko_id,
                    obdobi_id=obdobi_id
                )
                db.session.add(zaloha_faktura)
            
            # Aktualizuj z√°lohu
            zaloha_faktura.zaloha = celkova_zaloha
            
            flash(f"üí∞ Z√°loha {celkova_zaloha:,.2f} Kƒç byla automaticky ulo≈æena do z√°lohov√© faktury.")

        # Zbytek p≈Øvodn√≠ho k√≥du pro vytvo≈ôen√≠ odeƒçt≈Ø...
        from collections import defaultdict
        odecty_dict = defaultdict(lambda: {
            'vt': None,
            'nt': None,
            'spolecne': None
        })

        # Seskup√≠me podle oznaƒçen√≠ OM
        for imp in importy:
            key = imp.oznaceni_om
            
            if imp.popis_dimenze in ["Spot≈ôeba VT", "VT"]:
                odecty_dict[key]['vt'] = imp
            elif imp.popis_dimenze in ["Spot≈ôeba NT", "NT"]:
                odecty_dict[key]['nt'] = imp
            else:
                odecty_dict[key]['spolecne'] = imp

        # Vytvo≈ô√≠me kombinovan√© odeƒçty
        uspesne_odecty = 0
        for oznaceni_om, data in odecty_dict.items():
            vt_data = data['vt']
            nt_data = data['nt']
            spolecne_data = data['spolecne'] or vt_data or nt_data

            if not spolecne_data:
                continue

            novy_odecet = Odecet(
                stredisko_id=stredisko_id,
                oznaceni=oznaceni_om,
                zacatek_periody_mereni=spolecne_data.zacatek_periody_mereni,
                konec_periody_mereni=spolecne_data.konec_periody_mereni,
                
                # VT data
                pocatecni_hodnota_vt=vt_data.pocatecni_hodnota if vt_data else None,
                hodnota_odectu_vt=vt_data.hodnota_odectu if vt_data else None,
                spotreba_vt=vt_data.spotreba if vt_data else None,
                
                # NT data
                pocatecni_hodnota_nt=nt_data.pocatecni_hodnota if nt_data else None,
                hodnota_odectu_nt=nt_data.hodnota_odectu if nt_data else None,
                spotreba_nt=nt_data.spotreba if nt_data else None,
                
                # Ostatn√≠ data ze spoleƒçn√©ho z√°znamu
                slevovy_bonus=spolecne_data.slevovy_bonus,
                priznak=spolecne_data.priznak,
                dofakturace=spolecne_data.dofakturace,
                obdobi_id=obdobi_id
            )
            
            db.session.add(novy_odecet)
            uspesne_odecty += 1

        db.session.commit()
        flash(f"‚úÖ √öspƒõ≈°nƒõ vytvo≈ôeno {uspesne_odecty} kombinovan√Ωch odeƒçt≈Ø ze {len(importy)} importovan√Ωch z√°znam≈Ø.")

    except Exception as e:
        db.session.rollback()
        flash(f"‚ùå Chyba p≈ôi potvrzov√°n√≠: {e}")

    return redirect(url_for("odecty.odecty", stredisko_id=stredisko_id, obdobi_id=obdobi_id))


# Zobrazen√≠ odectu v kontrole

@odecty_bp.route("/<int:stredisko_id>/kontrola_odectu")
def kontrola_odectu(stredisko_id):
    if not session.get("user_id"):
        return redirect("/login")

    # Naƒçti st≈ôedisko a ovƒõ≈ô vlastnictv√≠
    stredisko = Stredisko.query.get_or_404(stredisko_id)
    if stredisko.user_id != session["user_id"]:
        return "Nepovolen√Ω p≈ô√≠stup", 403

    # ‚úÖ NOV√â - jednotn√° spr√°va obdob√≠
    vsechna_obdobi = ObdobiFakturace.query.filter_by(
        stredisko_id=stredisko_id
    ).order_by(ObdobiFakturace.rok, ObdobiFakturace.mesic).all()

    # Zpracuj v√Ωbƒõr obdob√≠ ze session
    vybrane_obdobi = handle_obdobi_selection(stredisko_id, request.args)

    # Naƒçti zpracovan√© odeƒçty podle vybran√©ho obdob√≠
    odecty = []
    if vybrane_obdobi:
        odecty = Odecet.query.filter_by(
            stredisko_id=stredisko_id,
            obdobi_id=vybrane_obdobi.id
        ).all()

    return render_template(
        "fakturace/kontrola_odectu.html",
        stredisko=stredisko,
        vsechna_obdobi=vsechna_obdobi,
        vybrane_obdobi=vybrane_obdobi,
        odecty=odecty
    )