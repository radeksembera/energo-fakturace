"""
session_helpers.py
Pomocn√© funkce pro spr√°vu vybran√©ho obdob√≠ v u≈æivatelsk√© session
"""

from datetime import datetime
from flask import session
from models import ObdobiFakturace

def get_default_obdobi_for_stredisko(stredisko_id):
    """
    Z√≠sk√° v√Ωchoz√≠ obdob√≠ pro st≈ôedisko (aktu√°ln√≠ mƒõs√≠c/rok)
    Pokud aktu√°ln√≠ mƒõs√≠c neexistuje, vr√°t√≠ nejnovƒõj≈°√≠ dostupn√© obdob√≠
    """
    current_date = datetime.now()
    current_year = current_date.year
    current_month = current_date.month
    
    print(f"üîç DEBUG: Hled√°m v√Ωchoz√≠ obdob√≠ pro st≈ôedisko {stredisko_id}")
    print(f"üîç DEBUG: Aktu√°ln√≠ datum: {current_year}/{current_month:02d}")
    
    # Najdi aktu√°ln√≠ obdob√≠
    obdobi = ObdobiFakturace.query.filter_by(
        stredisko_id=stredisko_id,
        rok=current_year,
        mesic=current_month
    ).first()
    
    if obdobi:
        print(f"‚úÖ DEBUG: Nalezeno aktu√°ln√≠ obdob√≠ {obdobi.rok}/{obdobi.mesic:02d} (ID: {obdobi.id})")
        return obdobi
    
    print(f"‚ö†Ô∏è DEBUG: Aktu√°ln√≠ obdob√≠ {current_year}/{current_month:02d} neexistuje, hled√°m nejnovƒõj≈°√≠")
    
    # Pokud aktu√°ln√≠ mƒõs√≠c neexistuje, vezmi nejnovƒõj≈°√≠ dostupn√©
    obdobi = ObdobiFakturace.query.filter_by(
        stredisko_id=stredisko_id
    ).order_by(ObdobiFakturace.rok.desc(), ObdobiFakturace.mesic.desc()).first()
    
    if obdobi:
        print(f"‚úÖ DEBUG: Nalezeno nejnovƒõj≈°√≠ obdob√≠ {obdobi.rok}/{obdobi.mesic:02d} (ID: {obdobi.id})")
    else:
        print(f"‚ùå DEBUG: ≈Ω√°dn√© obdob√≠ pro st≈ôedisko {stredisko_id} neexistuje")
    
    return obdobi

def get_session_obdobi(stredisko_id):
    """
    Z√≠sk√° obdob√≠ pro st≈ôedisko ze session nebo nastav√≠ v√Ωchoz√≠
    """
    session_key = f"vybrane_obdobi_{stredisko_id}"
    
    print(f"üîç DEBUG: Hled√°m obdob√≠ pro st≈ôedisko {stredisko_id}")
    print(f"üîç DEBUG: Session key: {session_key}")
    print(f"üîç DEBUG: Session obsahuje: {list(session.keys())}")
    
    # Pokud nen√≠ v session, nastav v√Ωchoz√≠
    if session_key not in session:
        print(f"üîç DEBUG: Kl√≠ƒç {session_key} NEN√ç v session, nastavuji v√Ωchoz√≠")
        default_obdobi = get_default_obdobi_for_stredisko(stredisko_id)
        if default_obdobi:
            session[session_key] = default_obdobi.id
            print(f"‚úÖ DEBUG: Nastaveno v√Ωchoz√≠ obdob√≠ {default_obdobi.rok}/{default_obdobi.mesic:02d} (ID: {default_obdobi.id})")
            return default_obdobi
        print(f"‚ùå DEBUG: ≈Ω√°dn√© v√Ωchoz√≠ obdob√≠ nenalezeno")
        return None
    
    # Naƒçti z session
    obdobi_id = session[session_key]
    print(f"üîç DEBUG: Naƒç√≠t√°m obdobi_id {obdobi_id} ze session")
    
    obdobi = ObdobiFakturace.query.filter_by(
        id=obdobi_id,
        stredisko_id=stredisko_id
    ).first()
    
    if obdobi:
        print(f"‚úÖ DEBUG: Nalezeno obdob√≠ {obdobi.rok}/{obdobi.mesic:02d} ze session")
    else:
        print(f"‚ùå DEBUG: Obdob√≠ ID {obdobi_id} neexistuje, nastavuji nov√© v√Ωchoz√≠")
        # Pokud obdob√≠ u≈æ neexistuje, nastav nov√© v√Ωchoz√≠
        default_obdobi = get_default_obdobi_for_stredisko(stredisko_id)
        if default_obdobi:
            session[session_key] = default_obdobi.id
        return default_obdobi
    
    return obdobi

def set_session_obdobi(stredisko_id, obdobi_id):
    """
    Nastav√≠ obdob√≠ pro st≈ôedisko do session
    """
    session_key = f"vybrane_obdobi_{stredisko_id}"
    session[session_key] = obdobi_id
    print(f"üîÑ Session: Nastaveno obdob√≠ {obdobi_id} pro st≈ôedisko {stredisko_id}")

def handle_obdobi_selection(stredisko_id, request_args):
    """
    Zpracuje v√Ωbƒõr obdob√≠ z GET parametr≈Ø a aktualizuje session
    Pou≈æije se v ka≈æd√© route, kter√° m√° v√Ωbƒõr obdob√≠
    
    Args:
        stredisko_id: ID st≈ôediska
        request_args: request.args z Flask
    
    Returns:
        ObdobiFakturace objekt nebo None
    """
    # Pokud je v URL parametru nov√© obdob√≠, ulo≈æ do session
    new_obdobi_id = request_args.get("obdobi_id", type=int)
    if new_obdobi_id:
        # Ovƒõ≈ô, ≈æe obdob√≠ pat≈ô√≠ st≈ôediska
        obdobi = ObdobiFakturace.query.filter_by(
            id=new_obdobi_id,
            stredisko_id=stredisko_id
        ).first()
        if obdobi:
            set_session_obdobi(stredisko_id, new_obdobi_id)
            print(f"‚úÖ Session: U≈æivatel vybral obdob√≠ {obdobi.rok}/{obdobi.mesic:02d}")
    
    # Vra≈• aktu√°ln√≠ obdob√≠ ze session
    return get_session_obdobi(stredisko_id)

# V session_helpers.py - oprava funkce handle_obdobi_from_rok_mesic

def handle_obdobi_from_rok_mesic(stredisko_id, request_args):
    """
    Speci√°ln√≠ funkce pro ceny dodavatele - p≈ôevede rok/mƒõs√≠c na obdobi_id
    a ulo≈æ√≠ do session. Pokud obdob√≠ neexistuje, vytvo≈ô√≠ ho.
    
    Args:
        stredisko_id: ID st≈ôediska
        request_args: request.args z Flask (oƒçek√°v√° 'rok' a 'mesic')
    
    Returns:
        ObdobiFakturace objekt nebo None
    """
    url_rok = request_args.get("rok", type=int)
    url_mesic = request_args.get("mesic", type=int)
    
    if url_rok and url_mesic:
        # Najdi obdob√≠ podle roku/mƒõs√≠ce
        obdobi = ObdobiFakturace.query.filter_by(
            stredisko_id=stredisko_id,
            rok=url_rok,
            mesic=url_mesic
        ).first()
        
        if not obdobi:
            # ‚úÖ OPRAVA: Pokud obdob√≠ neexistuje, vytvo≈ô ho
            from models import db  # Import zde aby se p≈ôede≈°lo circular import
            obdobi = ObdobiFakturace(
                stredisko_id=stredisko_id,
                rok=url_rok,
                mesic=url_mesic
            )
            db.session.add(obdobi)
            db.session.commit()
            print(f"‚úÖ Session: Vytvo≈ôeno nov√© obdob√≠ {url_rok}/{url_mesic:02d} (ID: {obdobi.id})")
        
        # Ulo≈æ do session
        set_session_obdobi(stredisko_id, obdobi.id)
        print(f"‚úÖ Session: U≈æivatel vybral obdob√≠ {url_rok}/{url_mesic:02d} (ID: {obdobi.id})")
        return obdobi
    
    # Pokud nejsou URL parametry, vra≈• aktu√°ln√≠ obdob√≠ ze session
    return get_session_obdobi(stredisko_id)

def clear_session_obdobi(stredisko_id):
    """
    Vyma≈æe ulo≈æen√© obdob√≠ pro st≈ôedisko ze session
    U≈æiteƒçn√© p≈ôi p≈ôep√≠n√°n√≠ mezi st≈ôedisky
    """
    session_key = f"vybrane_obdobi_{stredisko_id}"
    if session_key in session:
        del session[session_key]
        print(f"üóëÔ∏è Session: Vymaz√°no obdob√≠ pro st≈ôedisko {stredisko_id}")

def get_session_debug_info():
    """
    Debug funkce - vr√°t√≠ informace o ulo≈æen√Ωch obdob√≠ch v session
    """
    obdobi_keys = [key for key in session.keys() if key.startswith("vybrane_obdobi_")]
    debug_info = {}
    
    for key in obdobi_keys:
        stredisko_id = key.replace("vybrane_obdobi_", "")
        obdobi_id = session[key]
        
        # Naƒçti obdob√≠ pro debug info
        obdobi = ObdobiFakturace.query.get(obdobi_id)
        if obdobi:
            debug_info[stredisko_id] = f"{obdobi.rok}/{obdobi.mesic:02d} (ID: {obdobi_id})"
        else:
            debug_info[stredisko_id] = f"ID: {obdobi_id} (neexistuje)"
    
    return debug_info